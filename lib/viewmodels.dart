import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart' hide Theme;
import 'package:logger/logger.dart';
import 'models.dart';

class MemoViewModel extends ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final Logger logger = Logger();
  // No more in-memory lists or maps! Data comes directly from Firestore via streams.
  // The constructor no longer initializes default data.
  // Helper to get the current user's ID
  String? get currentUserId => _auth.currentUser?.uid;
  // --- Theme Operations ---
  // Exposes a Stream of ThemeModel lists for UI to listen to
  Stream<List<ThemeModel>> get userThemesStream {
    final userId = currentUserId;
    if (userId == null) {
      // Return an empty stream if no user is signed in.
      // The UI should handle this case (e.g., show a login prompt).
      return Stream.value([]);
    }

    return _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .orderBy(
          'createdAt',
          descending: true,
        ) // Assuming you add 'createdAt' to your theme documents
        .snapshots() // This is the magic for real-time updates!
        .map((snapshot) {
          return snapshot.docs
              .map((doc) => ThemeModel.fromFirestore(doc))
              .toList();
        });
  }

  Stream<int> getCardCountForThemeStream(String themeId) {
    final userId = currentUserId;
    if (userId == null) {
      return Stream.value(0); // No user signed in, no cards to count
    }
    // Count cards directly from Firestore

    return _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeId)
        .collection('cards')
        .snapshots()
        .map((snapshot) => snapshot.docs.length);// Use first to get the initial count
  }

  // Function to get the number of cards known for a specific theme
  Stream<int> getKnownCardCountForThemeStream(String themeId) {
    final userId = currentUserId;
    if (userId == null) {
      return Stream.value(0); // No user signed in, no known cards to count
    }

    return _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeId)
        .collection('cards')
        .where('isKnown', isEqualTo: true) // Filter for known cards
        .snapshots()
        .map((snapshot) => snapshot.docs.length); // Return the count of known cards
  }
  
  // Function to get the number of cards not known for a specific theme
  Stream<int> getNotKnownCardCountForThemeStream(String themeId) {
    final userId = currentUserId;
    if (userId == null) {
      return Stream.value(0); // No user signed in, no not known cards to count
    }

    return _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeId)
        .collection('cards')
        .where('isKnown', isEqualTo: false) // Filter for not known cards
        .snapshots()
        .map((snapshot) => snapshot.docs.length); // Return the count of not known cards
  }

  void setCardKnown(String themeId, String cardId, bool isKnown) {
    final userId = currentUserId;
    if (userId == null) {
      logger.e("Error: User not signed in. Cannot update card known status.");
      return;
    }
    final payload = {'isKnown': isKnown};
    logger.d("LOGGER DEBUG : Firestore update payload: $payload");
    _firestore
      .collection('users')
      .doc(userId)
      .collection('themes')
      .doc(themeId)
      .collection('cards')
      .doc(cardId)
      .update(payload);
  }
  
  // Function to add a new theme
  Future<void> addTheme(String themeName) async {
    final userId = currentUserId;
    if (userId == null) {
      // In a real app, you might throw an error, navigate to login, or show a message.
      logger.e("Error: User not signed in. Cannot add theme.");
      return;
    }

    final newTheme = ThemeModel(
      id: '',
      name: themeName,
      userId: userId,
    ); // ID will be auto-generated by Firestore
    await _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .add(newTheme.toFirestore()); // Add the new theme document
  }

  // Function to edit an existing theme's name
  Future<void> editTheme(ThemeModel themeToEdit, String newName) async {
    final userId = currentUserId;
    if (userId == null) {
      logger.e("Error: User not signed in. Cannot edit theme.");
      return;
    }

    // Ensure the theme belongs to the current user (Firestore rules will also enforce this)
    if (themeToEdit.userId != userId) {
      logger.e("Error: Unauthorized attempt to edit theme.");
      return;
    }

    await _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeToEdit.id) // Use the theme's Firestore ID
        .update({'name': newName}); // Update only the 'name' field
  }

  // Function to remove a theme (and its associated cards)
  Future<void> removeTheme(ThemeModel themeToRemove) async {
    final userId = currentUserId;
    if (userId == null) {
      logger.e("Error: User not signed in. Cannot remove theme.");
      return;
    }

    if (themeToRemove.userId != userId) {
      logger.e("Error: Unauthorized attempt to remove theme.");
      return;
    }

    // IMPORTANT: Firestore does NOT automatically delete subcollections.
    // You must manually delete cards before deleting the theme document.
    // For large numbers of cards, consider using a Cloud Function.

    final cardsSnapshot = await _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeToRemove.id)
        .collection('cards')
        .get();

    for (var doc in cardsSnapshot.docs) {
      await doc.reference.delete(); // Delete each card
    }
    // Finally, delete the theme document itself
    await _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeToRemove.id)
        .delete();
  }

  // --- FullCard Operations ---
  // Exposes a Stream of FullCardModel lists for a specific theme
  Stream<List<FullCardModel>> cardsForThemeStream(String themeId) {
    final userId = currentUserId;
    if (userId == null) {
      return Stream.value([]);
    }
    return _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeId)
        .collection('cards')
        .orderBy(
          'createdAt',
          descending: true,
        ) // Assuming you add 'createdAt' to your card documents
        .snapshots()
        .map((snapshot) {
          return snapshot.docs
              .map((doc) => FullCardModel.fromFirestore(doc))
              .toList();
        });
  }

  // Function to add a new card to a specific theme
  Future<void> addCard(String themeId, String subject, String answer, bool isKnown) async {
    final userId = currentUserId;
    if (userId == null) {
      logger.e("Error: User not signed in. Cannot add card.");
      return;
    }

    final newCard = FullCardModel(
      id: '', // ID will be auto-generated by Firestore
      themeId: themeId,
      subject: subject,
      answer: answer,
      isKnown: isKnown,
      userId: userId,
    );

    await _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(themeId)
        .collection('cards')
        .add(newCard.toFirestore());
  }

  // Function to edit an existing card's title and description
  Future<void> editCard(
    FullCardModel cardToEdit,
    String newSubject,
    String newAnswer,
  ) async {
    final userId = currentUserId;
    if (userId == null) {
      logger.e("Error: User not signed in. Cannot edit card.");
      return;
    }

    if (cardToEdit.userId != userId) {
      logger.e("Error: Unauthorized attempt to edit card.");
      return;
    }

    await _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(cardToEdit.themeId)
        .collection('cards')
        .doc(cardToEdit.id) // Use the card's Firestore ID
        .update({'subject': newSubject, 'answer': newAnswer});
  }

  // Function to remove a specific card
  Future<void> removeCard(FullCardModel cardToRemove) async {
    final userId = currentUserId;
    if (userId == null) {
      logger.e("Error: User not signed in. Cannot remove card.");
      return;
    }

    if (cardToRemove.userId != userId) {
      logger.e("Error: Unauthorized attempt to remove card.");
      return;
    }

    await _firestore
        .collection('users')
        .doc(userId)
        .collection('themes')
        .doc(cardToRemove.themeId)
        .collection('cards')
        .doc(cardToRemove.id) // Use the card's Firestore ID
        .delete();
  }

  Future<void> addDefaultThemesWithCards() async {
    final userId = currentUserId;
    if (userId == null) {
      logger.e("Error: User not signed in. Cannot add default themes.");
      return;
    }

    // Define default themes
    final themes = [
      {'name': 'General Knowledge'},
      {'name': 'Science'},
    ];

    // Define cards for each theme
    final cards = {
      'General Knowledge': [
        {'subject': 'Capital of France', 'answer': 'Paris'},
        {'subject': 'Largest ocean', 'answer': 'Pacific Ocean'},
        {'subject': 'Fastest land animal', 'answer': 'Cheetah'},
      ],
      'Science': [
        {'subject': 'H2O is known as?', 'answer': 'Water'},
        {'subject': 'Earth revolves around?', 'answer': 'The Sun'},
        {'subject': 'Basic unit of life', 'answer': 'Cell'},
      ],
    };

    for (var theme in themes) {
      // Add theme and get its document reference
      addTheme(theme['name']!);

      // Add cards to the theme
      for (var card in cards[theme['name']]!) {
        final subject = card['subject']!;
        final answer = card['answer']!;
        // Use the theme name to find the theme ID
        final themeId = await _firestore
            .collection('users')
            .doc(userId)
            .collection('themes')
            .where('name', isEqualTo: theme['name'])
            .get()
            .then((snapshot) => snapshot.docs.first.id);
        
        // Add the card
        addCard(themeId, subject, answer, false); // Default isKnown to false
      }
    }
  }
}
